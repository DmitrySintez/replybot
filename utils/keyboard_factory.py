from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import Dict, List, Any

class KeyboardFactory:
    """Factory Pattern implementation for creating keyboards"""
    

    @staticmethod
    def create_main_keyboard(running: bool = False, auto_forward: bool = False) -> Any:
        """Create main menu keyboard"""
        kb = InlineKeyboardBuilder()
        kb.button(
            text="üîÑ –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É" if not running else "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É",
            callback_data="toggle_forward"
        )
        kb.button(
            text=f"‚ö° –ê–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∞: {'–í–ö–õ' if auto_forward else '–í–´–ö–õ'}",
            callback_data="toggle_auto_forward"
        )
        kb.button(text="‚è±Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="interval_menu")
        kb.button(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="stats")
        kb.button(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", callback_data="channels")
        kb.button(text="üí¨ –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤", callback_data="list_chats")
        kb.button(text="ü§ñ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞", callback_data="clone_bot")
        kb.button(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–æ–Ω–∞–º–∏", callback_data="manage_clones")
        kb.adjust(2)
        return kb.as_markup()

    @staticmethod
    async def create_interval_keyboard() -> Any:
        """Create interval selection keyboard"""
        kb = InlineKeyboardBuilder()
        intervals = [
            ("5–º", 300), ("15–º", 900), ("30–º", 1800),
            ("1—á", 3600), ("2—á", 7200), ("6—á", 21600), 
            ("12—á", 43200), ("24—á", 86400)
        ]
        for label, seconds in intervals:
            kb.button(text=label, callback_data=f"interval_{seconds}")
        kb.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
        kb.adjust(4)
        return kb.as_markup()

    @staticmethod
    def create_chat_list_keyboard(chats: Dict[int, str]) -> Any:
        """Create chat list keyboard with remove buttons"""
        kb = InlineKeyboardBuilder()
        for chat_id, title in chats.items():
            kb.button(
                text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {title}",
                callback_data=f"remove_{chat_id}"
            )
        kb.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
        kb.adjust(1)
        return kb.as_markup()

    @staticmethod
    def create_channel_interval_keyboard(channels: List[str]) -> Any:
        """Create keyboard for setting intervals between channels"""
        kb = InlineKeyboardBuilder()
        
        for i, channel in enumerate(channels):
            if i < len(channels) - 1:
                next_channel = channels[i + 1]
                display_name1 = channel[:10] + "..." if len(channel) > 13 else channel
                display_name2 = next_channel[:10] + "..." if len(next_channel) > 13 else next_channel
                kb.button(
                    text=f"‚è±Ô∏è {display_name1} ‚Üí {display_name2}",
                    callback_data=f"interval_between_{channel}_{next_channel}"
                )
        
        kb.button(text="–ù–∞–∑–∞–¥", callback_data="channels")
        kb.adjust(1)
        return kb.as_markup()

    @staticmethod
    def create_channel_interval_options(channel1: str, channel2: str) -> Any:
        """Create keyboard with interval options between two channels"""
        kb = InlineKeyboardBuilder()
        intervals = [
            ("1–º", 60), ("5–º", 300), ("10–º", 600),
            ("15–º", 900), ("30–º", 1800), ("1—á", 3600)
        ]
        
        for label, seconds in intervals:
            kb.button(
                text=label, 
                callback_data=f"set_interval_{channel1}_{channel2}_{seconds}"
            )
        
        kb.button(text="–ù–∞–∑–∞–¥", callback_data="channel_intervals")
        kb.adjust(3)
        return kb.as_markup()

    @staticmethod
    def create_channel_management_keyboard(channels: List[str]) -> Any:
        """Create channel management keyboard, now with reorder option"""
        kb = InlineKeyboardBuilder()
        # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        kb.button(text="‚ÜïÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫", callback_data="reorder_channels")
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")
        
        if len(channels) >= 2:
            kb.button(text="‚è±Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏", callback_data="channel_intervals")
        
        # Add buttons for each channel
        for channel in channels:
            # Truncate channel name if too long
            display_name = channel[:15] + "..." if len(channel) > 18 else channel
            
            # Button only for removing channels
            kb.button(
                text=f"‚ùå –£–¥–∞–ª–∏—Ç—å ({display_name})",
                callback_data=f"remove_channel_{channel}"
            )
        
        kb.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
        kb.adjust(1)
        return kb.as_markup()